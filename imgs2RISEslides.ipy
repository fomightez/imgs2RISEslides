# imgs2RISEslides.ipy
__author__ = "Wayne Decatur" #fomightez on GitHub
__license__ = "MIT"
__version__ = "0.1.0"


# imgs2RISEslides.ipy by Wayne Decatur
# ver 0.1.0
#
#*******************************************************************************
# 
# PURPOSE: Takes a collection of image files in a folder and makes slides with 
# pairs of the images on them in a Jupyter-RISE slideshow.
# 
# Note to self: It looks like I was taking as a backbone for this effort 
# the code to make notebooks with plot images based on code in 
# https://github.com/fomightez/bendit-binder to make
# notebook cells with images side-by-side for automating making RISE 
# presentations with several images in a folder.

import os
import sys
from halo import HaloNotebook as Halo
import fnmatch
import datetime
import random
from PIL import Image, ImageDraw, ImageFont
from sh import curl
import nbformat as nbf
try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO


img_dir = "SLIDESHOW_IMGS"

img_extensions = (".png", ".jpg", ".jpeg",".gif")





################################################################################
#######----------------------HELPER FUNCTIONS-----------------------------######

def write_string_to_file(s, fn):
    '''
    Takes a string, `s`, and a name for a file & writes the string to the file.
    '''
    with open(fn, 'w') as output_file:
        output_file.write(s)

def out2_stderr_n_log(s,log_file_text):
    '''
    Takes a string as input and sends it to the stderr as well as to a building
    string that will eventually get saved as a Log file.
    Also needs the Log file to be sent in because gets assigned within the
    function in order to add to it. Returns the modified `log_file_text`.
    '''
    sys.stderr.write(s)
    log_file_text += s
    return log_file_text

def make_placeholder_images(img_dir):
    '''
    Takes a directory and saves image files to it to be used as placeholders in
    demonstration

    Makes an odd number of images because best script can handle when last slide
    cannot have two images.
    '''
    number_of_placeholder_images_to_generate = 6
    color_list = (["orange", "pink", "red", "blue","cyan",
        "cornflowerblue","violet","crimson","wheat"])
    color_list += (["#eb5803", "#e31d6c", "#c90e0e", "#0f0fdb","#16daf0",
        "#3465e0","#c10ec7","#3d0606","#9e8659","#00ff00"])
    for i in range(1,number_of_placeholder_images_to_generate+1):
        # make a blank image for the text, initialized to transparent text color
        img = Image.new('RGB', (350,350), color=random.choice(color_list))

        # get a font
        #fnt = ImageFont.truetype('/usr/share/fonts/truetype/freefont/FreeMono.ttf', 40)
        # got around specifying font and not knowing where it would be in the linux system 
        # by not doing that. (based on https://notebooks.ai/santiagobasulto/how-to-generate-images-with-text-using-python-and-pil-bcd5d188)
        # get a drawing context

        d = ImageDraw.Draw(img)

        # draw text, full opacity
        d.text((10,60), "This is image {}".format(i), fill=(255,255,255))
        img.save('{}/image_{}.png'.format(img_dir,i))
    color_list = (["eb5803", "e31d6c", "c90e0e", "0f0fdb","16daf0","3465e0","c10ec7",
    "3d0606","9e8659","00ff00","609413","d66969","1d9e57","552475"])
    number_of_placeholder_images_to_generate = 7 # want odd so can make sure the 
    # script is handle odd numbers of images
    for i in range(1,number_of_placeholder_images_to_generate+1):
        '''
        Using [Dynamic Dummy Image Generator](https://dummyimage.com/) and curl
        '''
        fn = 'ddimage_{}.png'.format(i)
        string_in_img = 'Image {}'.format(i)
        color=random.choice(color_list)
        curl("-L","-o","{}/{}".format(img_dir,fn),
            "https://dummyimage.com/350/{}/fff&text={}".format(color,string_in_img))

def chunks(a_list, n):
    """Yield successive n-sized chunks from list."""
    '''
    Split a list into chunks with also collecting any remainder group
    from https://stackoverflow.com/a/312464/8508004 , see
    https://gist.github.com/fomightez/ef7583919dde51f3569731ca1c5247ba
    '''
    for i in range(0, len(a_list), n):
        yield a_list[i:i+n]



#######------------------END OF HELPER FUNCTIONS--------------------------######
################################################################################


# To

slideshow_cell_stub_text ='''<img align="left" src="THE_IMAGE1_PLACEHOLDER_TEXT_GOES_HERE"  style="margin-right: 16%;" width="42%"/>
<img align="left" src="THE_IMAGE2_PLACEHOLDER_TEXT_GOES_HERE" width="42%"/>
<p style="clear: both;">
''' 

si_slideshow_cell_stub_text ='''<center><img src="THE_IMAGE1_PLACEHOLDER_TEXT_GOES_HERE" />
</center>
''' # see https://rise.readthedocs.io/en/stable/usage.html#other-notes for how 
# to center images

RISEnb_stub_text='''{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "markdown cell 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "makdown cell 2"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.8"
  },
  "livereveal": {
   "autolaunch": true,
   "scroll": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}'''


log_file_text = ("####BELOW IS LOG of std.out and std.err from "
    "ims2RISEslides.py run: ######\n\n")




################################################################################
#######------------------------MAIN SECTION-------------------------------######


files_produced = []


# GO THROUGH THE IMAGE DIRECTORY AND COLLECT THE NAMES OF THE IMAGES TO PROCESS:
#------------------------------------------------------------------------------#
# If the Image directory is empty, first make some images there
dir_contents = [f for f in os.listdir(img_dir) if not f.startswith('.')] # based
# on https://stackoverflow.com/a/26554941/8508004
if len(dir_contents) == 0:
    spinner = Halo(
        text='Generating demonstration images..', 
        spinner='dots',color = 'magenta')
    spinner.start()
    for_out2both = "Generating demonstation images..."
    # note that it makes an odd number of images for the demonstation so that
    # sure it can handle making last slide when there may not be two images 
    # to put on that slide after all others already placed
    log_file_text += for_out2both 
    make_placeholder_images(img_dir)

# Make a list of files ending in `.png, `.jpg` or variations of `.jpg`
dir_contents = [f for f in os.listdir(img_dir) if not f.startswith('.')]
img_files = []
for fn in dir_contents:
    if fn.lower().endswith(('.jpg', '.jpeg', '.gif', '.png')):
        img_files.append(img_dir+"/"+fn)
for_out2both = "\nMade list of image files..."
log_file_text += for_out2both 


# Chunk list of image file names for use in making slides:
#------------------------------------------------------------------------------#
image_fn_pairs = list(chunks(img_files,2))
image_fn_pairs
for_out2both = "\nMade pairings of image files..."
log_file_text += for_out2both 
# for_out2both = " ".join(" ".join(image_fn_pairs)) 
for_out2both = "\nImage pairs for each slide:"
log_file_text += for_out2both 
for p in image_fn_pairs:
    log_file_text += "\n" + str(p)

# PLACE IMAGES ON SLIDES (OR WHAT WILL BECOME SLIDES):
#------------------------------------------------------------------------------#
# Needs to be able to handle an odd number of slides as well as even
for_out2both = "\nPlace image files in notebook cells..."
log_file_text += for_out2both 
a = nbf.v4.new_notebook()
for p in image_fn_pairs:
    if len(p) == 2:
        content_for_md_cell = slideshow_cell_stub_text.replace(
            "THE_IMAGE1_PLACEHOLDER_TEXT_GOES_HERE",p[0]).replace(
            "THE_IMAGE2_PLACEHOLDER_TEXT_GOES_HERE",p[1])
        a.cells.append(nbf.v4.new_markdown_cell(content_for_md_cell))
    else:
        content_for_md_cell = si_slideshow_cell_stub_text.replace(
            "THE_IMAGE1_PLACEHOLDER_TEXT_GOES_HERE",p[0])
        a.cells.append(nbf.v4.new_markdown_cell(content_for_md_cell))
for_out2both = "\nFix cell metadata so each cell is a slide..."
log_file_text += for_out2both 
# fix the metadata for each cell to be for a slide
slide_show_meta = {"slideshow": {"slide_type": "slide"}}
# a.cells = [c["metadata"] = slide_show_meta for c in a.cells]
meta_fixed_cells = []
for c in a.cells:
    c["metadata"] = slide_show_meta
    meta_fixed_cells.append(c)
a.cells = meta_fixed_cells


#slideshow_cell_stub_text
#a.cells.append(nbf.v4.new_markdown_cell("This is a test."))
#a.cells.append(nbf.v4.new_markdown_cell("This is a another cell with another test."))
# get notebook metadata and add; I had wanted to do this using a stub of text
# in this script but for some reason even though I could save a new notebook and
# put that text in a docstring and read it using stringIO to pass to `nbf.read()`
# the one from the stub with the livereveal stuff always gave a json encoding 
# error, see `dissecting a RISE slideshow notebook with nbformat.ipynb`. And
# it wasn't just that notebook, even my `index.ipynb` couldn't be stored as a
# docstring and read in. It seemed anything that had more than one line of 
# markdown in a cell broke it. <=== OH WAIT. While writing that I thought I'd
# simplify further but not having more than one markdown cell and then it 
# worked?!?
#RISEntbk_stub = nbf.read("RISEnb_stub.ipynb", nbf.NO_CONVERT) #<== thought I'd
# need to keep file to read in the source of proper RISE/Livereval metadata
# but then simplified further and finally worked. (See comments just above.)
for_out2both = "\nFix notebook metadata so slideshow plays automatically..."
log_file_text += for_out2both 
RISEntbk_stub = nbf.read(StringIO(RISEnb_stub_text), 4)
a.metadata = RISEntbk_stub.metadata
# Save the new RISE presentation notebook
now = datetime.datetime.now()
nb_file_name = f"slides_nb{now.strftime('%b%d%Y%H%M')}.ipynb"
for_out2both = "\nSave notebook..."
log_file_text += for_out2both 
nbf.write(a, nb_file_name)
files_produced.append(nb_file_name)





for_out2both = "\n#--------*****END OF SLIDESHOW GENERATION******---------#"
log_file_text += for_out2both  #log_file_text = out2_stderr_n_log(for_out2both,log_file_text)
    





# FINISH LOG AND ARCHIVE THE NOTEBOOK ALONG WITH THE IMAGES:
#------------------------------------------------------------------------------#
# Make archive with `.zip` so easier for non-Unix people to handle


# Need equivalent of this in Jupyter, for Python:
#!tar czf slides_attempt.tar.gz SLIDESHOW_IMGS/* new_notebook_from_programmatic.ipynb + log



log_file_text += (f"\n\n#### THIS CONCLUDES THE SLIDESHOW MAKING.  "
    f"{now.strftime('%b%d%Y%H%M')}#######")
log_file_name = f"LOG_imgs2slides{now.strftime('%b%d%Y%H%M')}.txt"
write_string_to_file(log_file_text, log_file_name )
for_out2both =(f"\n\nLog file from the run has been saved as\n"
    f"`{log_file_name}`.")
log_file_text += for_out2both  #log_file_text = out2_stderr_n_log(for_out2both,log_file_text)
files_produced.append(log_file_name)

files_produced.append(img_dir+'/*')

# Make the archive from the run
archive_file_name = f"imgs2slides{now.strftime('%b%d%Y%H%M')}.tar.gz"
#print(files_produced) # FOR DEBUGGING ONLY
#!tar czf {archive_file_name} {" ".join(files_produced)}
os.system(f'tar czf {archive_file_name} {" ".join(files_produced)}')
sys.stderr.write("\n"
    "**************SLIDESHOW GENERATION DONE***************************\n"
    "{} generated. Download it.\n"
    "**************SLIDESHOW GENERATION DONE***************************".format(
    archive_file_name))

#######------------------END OF MAIN SECTION------------------------------######
################################################################################
